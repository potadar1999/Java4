Explain the difference between overloading and overriding methods with an example

Method Overloading:
Method overloading is a compile-time polymorphism.
It helps to increase the readability of the program.
It occurs within the class.
Method overloading may or may not require inheritance.
In method overloading, methods must have the same name and different signatures.
Static binding is being used for overloaded methods

overriding :
Method overriding is a run-time polymorphism.
It is used to grant the specific implementation of the method which is already provided by its parent class or superclass.
It is performed in two classes with inheritance relationships.
Method overriding always needs inheritance.
In method overriding, methods must have the same name and same signature.
In method overriding, the return type must be the same or co-variant.
Dynamic binding is being used for overriding methods



package com.journaldev.examples;

import java.util.Arrays;

public class Processor {

	public void process(int i, int j) {
		System.out.printf("Processing two integers:%d, %d", i, j);
	}

	public void process(int[] ints) {
		System.out.println("Adding integer array:" + Arrays.toString(ints));
	}

	public void process(Object[] objs) {
		System.out.println("Adding integer array:" + Arrays.toString(objs));
	}
}

class MathProcessor extends Processor {

	@Override
	public void process(int i, int j) {
		System.out.println("Sum of integers is " + (i + j));
	}

	@Override
	public void process(int[] ints) {
		int sum = 0;
		for (int i : ints) {
			sum += i;
		}
		System.out.println("Sum of integer array elements is " + sum);
	}

}